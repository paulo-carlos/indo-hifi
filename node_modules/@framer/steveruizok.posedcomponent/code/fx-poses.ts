import createPosed, {
	scrollable,
	hoverable,
	pressable,
	draggable,
	focusable,
} from "fx-posed";
import { Override, Data } from "framer";

// ------- Hover

// Default Hover
const [wh0] = hoverable();

export const HoverTest0: Override = () => wh0;

// Hover with options
const [wh1] = hoverable({
	init: { top: 0, scale: 1 },
	hover: { top: -12, scale: 1.1 },
});

export const HoverTest1: Override = () => wh1;

// ------- Press

// Default Press
const [wp0] = pressable();

export const PressTest0: Override = () => wp0;

// Press with options
const [wp1] = pressable({
	init: { scale: 1 },
	press: { scale: 1.25 },
});

export const PressTest1: Override = () => wp1;

// Press with events
const data = Data({ mode: "night" });

const [wp2] = pressable();

export const PressTest2: Override = () => ({
	...wp2,
	onPressStart() {
		data.mode = "day";
	},
	onPressEnd() {
		data.mode = "night";
	},
});

// ------- Focus

// Default Focus
const [wf0] = focusable();

export const focusTest0: Override = () => wf0;

// ------- Drag

// Default Drag
const [wd0] = draggable();

export const dragTest0: Override = () => wd0;

// Drag with options
const [wd1] = draggable({
	init: { scale: 1, opacity: 1 },
	drag: { scale: 1.2, opacity: 0.6 },
});

export const dragTest1: Override = () => wd1;

// DragEnd
const [wd2] = draggable({
	dragEnd: {
		x: 0,
		y: 0,
		transition: { type: "spring" },
	},
});

export const dragTest2: Override = () => wd2;

// Drag with dragBounds
const [wd3] = draggable({
	dragBounds: {
		left: -100,
		right: 100,
		top: -100,
		bottom: 100,
	},
	dragEnd: { x: 0, y: 0, transition: { type: "spring" } },
});

export const dragTest3: Override = () => wd3;

// -------- Transitions

// Linear Transition
const [wt0] = pressable({
	init: {
		left: 0,
		transition: {
			duration: 618,
		},
	},
	press: {
		left: 800,
		transition: {
			duration: 1000,
		},
	},
});

export const transitionTest0: Override = () => wt0;

// Spring Transition
const [overrides] = pressable({
	init: {
		left: 0,
		transition: { type: "spring", stiffness: 100 },
	},
	press: {
		left: 800,
		transition: { type: "spring", stiffness: 60 },
	},
});

export const transitionTest1: Override = () => overrides;

// -------- Passive Props

// Drag / Opacity
const [wpp1] = draggable({
	draggable: "x",
	passive: {
		opacity: ["x", v => 1 - Math.abs(v / 150)],
	},
});

export const passiveTest1: Override = () => wpp1;

// -------- Dynamic Values

let taps = 0;

const [wdp0] = pressable({
	init: {
		left: () => taps * 100,
		scale: 1,
	},
});

export const dynamicTest1: Override = () => ({
	...wdp0,
	onTapStart() {
		taps++;
	},
});

// const [ws1, wsscroll1, ws1data, ws1Callback] = scrollable({
// 	from: {
// 		opacity: 1,
// 	},
// 	to: {
// 		opacity: 0,
// 	},
// 	direction: "horizontal",
// 	start: 100,
// 	distance: 200,
// });

// export const scrollable1Override: Override = () => ws1;

// export const scrollingOverride: Override = () => ({
// 	onMove: offset => {
// 		ws0Callback(offset);
// 		ws1Callback(offset);
// 	},
// });

const [ws0, wsscroll0] = scrollable({
	from: {
		opacity: 1,
		left: 0,
	},
	to: {
		opacity: 0,
		left: 100,
	},
	start: 40,
	distance: 200,
});

export const scrollable0Override: Override = () => ws0;

export const scrollingOverride: Override = () => wsscroll0;

const [
	posedComponentOverrides,
	scrollComponentOverrides,
	posedData,
] = scrollable({
	from: { opacity: 0 },
	to: { opacity: 1 },
	hideAfter: true,
});

export const posedComponentOverride: Override = () => ({
	...posedComponentOverrides,
	visible: posedData.visible,
});

export const scrollComponentOverride: Override = () => scrollComponentOverrides;
