import * as React from "react";
import { PropertyControls, ControlType, FrameProperties } from "framer";
import { createPosed, PosedProps } from "fx-posed";

const style: React.CSSProperties = {
	display: "flex",
	alignItems: "center",
	position: "absolute",
	height: "100%",
	width: "100%",
	overflow: "hidden",
	justifyContent: "space-around",
};

const [overrides, pose, setPose] = createPosed({
	poses: {
		hoverable: true,
		init: { scale: 1 },
		hover: { scale: 1.12 },
	},
	initialPose: "init",
	pose: "init",
});

const { container } = overrides as any;

const defaultStyle: React.CSSProperties = {
	...style,
	backgroundColor: "#FFF",
	color: "#000",
	padding: "24px",
};

// Define type of property
interface Props extends FrameProperties {
	container: any;
	initialPose: string;
	pose: string;
	onPoseComplete: (pose: any) => any;
	onDragEnd: (pose: any) => any;
	onDragStart: (pose: any) => any;
	onPressStart: (pose: any) => any;
	onPressEnd: (pose: any) => any;
	onValueChange: (pose: any) => any;
	parentValues: { [key: string]: any };
	withParent: boolean;
	values: any;
	props: any;
	poseKey: string;
	ref: any;
	fill: boolean;
}

export class Posed extends React.Component<Props> {
	// Set default properties
	static defaultProps = {
		container: container,
		initialPose: "init",
	};

	static propertyControls: PropertyControls = {
		fill: { type: ControlType.Boolean, title: "Fill" },
	};

	render() {
		const {
			ref,
			props,
			container,
			children,
			initialPose,
			pose,
			height,
			width,
			fill,
			onPoseComplete,
			onDragStart,
			onDragEnd,
			onValueChange,
			onPressStart,
			onPressEnd,
			values,
			parentValues,
			withParent,
			poseKey,
		} = this.props;

		let content;
		const child = children[0];
		const defaultContent = (
			<div style={defaultStyle}>
				Add a child and some pose overrides (see component docs)
			</div>
		);

		if (child) {
			// If fill prop is true, clone and stretch the child to fit bounds
			content = fill
				? React.cloneElement(child, { height: height, width: width })
				: child;
		} else {
			content = defaultContent;
		}

		const Container = container;

		return (
			<Container
				style={style}
				ref={ref}
				initialPose={initialPose}
				pose={pose}
				poseKey={poseKey}
				values={values}
				parentValues={parentValues}
				withParent={withParent}
				onDragStart={onDragStart}
				onDragEnd={onDragEnd}
				onValueChange={onValueChange}
				onPressStart={onPressStart}
				onPressEnd={onPressEnd}
				onPoseComplete={onPoseComplete}
				{...props}
			>
				{content}
			</Container>
		);
	}
}
